#version 460
#extension GL_EXT_buffer_reference : require

#include "tiled_lighting.h"

// One frustum per tile
layout(buffer_reference, std430) writeonly buffer LightTileFrustumBuffer { 
	LightTileFrustum data[];
};

layout (local_size_x = 16, local_size_y = 16) in;

layout (set = 0, binding = 0) uniform sampler2D inDepthBuffer;

layout(push_constant) uniform constants
{
	mat4 m_inverseProjViewMatrix;
	vec4 m_eyeWorldSpacePosition;	// w is unused
	vec2 m_screenDimensions;
	uint m_tileCount[2];
	LightTileFrustumBuffer m_tileFrustums;
} PushConstants;

// convert screen-space point with clip space z to clip space
vec3 TilePointToClipSpace(vec3 point)
{
	vec2 clipPoints = ((point.xy / PushConstants.m_screenDimensions) * 2.0f) - 1.0f;
	return vec3(clipPoints, point.z);
}

// take 3 points on a triangle + build a plane from them
vec4 PointsToPlane(vec3 p0, vec3 p1, vec3 p2)
{
	vec3 v0 = p1 - p0;
	vec3 v1 = p2 - p0;
	vec4 plane = vec4(normalize(cross(v0, v1)), 0.0f);
	plane.w = dot(plane.xyz, p0);
	return plane;
}

// Keep track of the max depth value for this tile
shared uint sharedMaxDepth;

void main() 
{
	if(gl_LocalInvocationIndex == 0)
	{
		sharedMaxDepth = 0;
	}
	groupMemoryBarrier();
	barrier();
	
	// now use each invocation to load the depth of a single pixel and track the min. value (to calculate far plane for this tile)
	if(gl_GlobalInvocationID.x < PushConstants.m_screenDimensions.x && gl_GlobalInvocationID.y < PushConstants.m_screenDimensions.y)
	{
		float depthValue = texelFetch(inDepthBuffer, ivec2(gl_GlobalInvocationID.xy), 0).r;
		atomicMax(sharedMaxDepth, floatBitsToUint(depthValue));
	}
	groupMemoryBarrier();
	barrier();

	// use a single invocation to build the tile frustum based on the tile position and min depth
	if(gl_LocalInvocationIndex == 0)
	{
		uint tileIndex = gl_WorkGroupID.x + (gl_WorkGroupID.y * PushConstants.m_tileCount[0]);
		
		float maxDepth = uintBitsToFloat(sharedMaxDepth);	// use min depth for the tile to build the frustum planes
		
		// generate screen-space points on the far clip plane
		vec3 farPoints[4] =
		{
			{ gl_WorkGroupID.x * COMPUTE_LIGHT_TILE_SIZE, gl_WorkGroupID.y * COMPUTE_LIGHT_TILE_SIZE, maxDepth },					// top left 
			{ (gl_WorkGroupID.x + 1) * COMPUTE_LIGHT_TILE_SIZE, gl_WorkGroupID.y * COMPUTE_LIGHT_TILE_SIZE, maxDepth },			// top right
			{ gl_WorkGroupID.x * COMPUTE_LIGHT_TILE_SIZE, (gl_WorkGroupID.y + 1) * COMPUTE_LIGHT_TILE_SIZE, maxDepth },			// botton left 
			{ (gl_WorkGroupID.x + 1) * COMPUTE_LIGHT_TILE_SIZE, (gl_WorkGroupID.y + 1) * COMPUTE_LIGHT_TILE_SIZE, maxDepth }		// botton right
		};
		
		// convert each point to world-space. I hope the compiler unrolls this!
		for(int i=0; i<4; ++i)
		{
			farPoints[i] = TilePointToClipSpace(farPoints[i]);
			vec4 projected = PushConstants.m_inverseProjViewMatrix * vec4(farPoints[i], 1.0f);
			farPoints[i] = vec3(projected / projected.w);	// perspective divide
		}
		
		// compute planes + write to the frustum buffer
		PushConstants.m_tileFrustums.data[tileIndex].m_planes[0] = PointsToPlane(PushConstants.m_eyeWorldSpacePosition.xyz, farPoints[2], farPoints[0]);
		PushConstants.m_tileFrustums.data[tileIndex].m_planes[1] = PointsToPlane(PushConstants.m_eyeWorldSpacePosition.xyz, farPoints[1], farPoints[3]);
		PushConstants.m_tileFrustums.data[tileIndex].m_planes[2] = PointsToPlane(PushConstants.m_eyeWorldSpacePosition.xyz, farPoints[0], farPoints[1]);
		PushConstants.m_tileFrustums.data[tileIndex].m_planes[3] = PointsToPlane(PushConstants.m_eyeWorldSpacePosition.xyz, farPoints[3], farPoints[2]);
		PushConstants.m_tileFrustums.data[tileIndex].m_planes[4] = PointsToPlane(farPoints[0], farPoints[2], farPoints[1]);
	}
}